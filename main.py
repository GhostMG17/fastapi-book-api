from fastapi import FastAPI, Depends, HTTPException, status, Path
from fastapi.security import OAuth2PasswordRequestForm
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from auth import hash_password, verify_password, create_access_token, get_current_user
from models import Book, User
from schemas import BookCreate, BookRead, UserCreate, UserRead, Token
from database import engine, Base, get_session


# –°–æ–∑–¥–∞—ë–º FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="üìö Book API",
    description="API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –ø–æ JWT.",
    version="1.0.0"
)


async def init_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.drop_all)
        await conn.run_sync(Base.metadata.create_all)


# –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚Äî —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
@app.on_event("startup")
async def on_startup():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)


@app.post(
    "/register",
    response_model=UserRead,
    tags=["Auth"],
    summary="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    description="–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
)
async def register_user(user: UserCreate, session: AsyncSession = Depends(get_session)):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    existing = await session.execute(
        select(User).where(User.username == user.username)
    )
    if existing.scalar_one_or_none():
        raise HTTPException(status_code=400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_user = User(
        username=user.username,
        hashed_password=hash_password(user.password)
    )
    session.add(new_user)
    await session.commit()
    await session.refresh(new_user)
    return new_user


@app.post(
    "/login",
    response_model=Token,
    tags=["Auth"],
    summary="–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    description="–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JWT-—Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—â–∏—â—ë–Ω–Ω—ã–º –º–∞—Ä—à—Ä—É—Ç–∞–º."
)
async def login(
    form_data: OAuth2PasswordRequestForm = Depends(),
    session: AsyncSession = Depends(get_session)
):
    result = await session.execute(select(User).where(User.username == form_data.username))
    user = result.scalar_one_or_none()
    if not user or not verify_password(form_data.password, user.hashed_password):
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    token = create_access_token(data={"sub": user.username})
    return {"access_token": token, "token_type": "bearer"}


# POST /books ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É
@app.post(
    "/books",
    response_model=BookRead,
    tags=["Books"],
    summary="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É",
    description="–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∫–Ω–∏–≥—É, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—É—é –∫ —Ç–µ–∫—É—â–µ–º—É –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
)
async def create_book(
    book: BookCreate,
    session: AsyncSession = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    new_book = Book(  # —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –∫–Ω–∏–≥–∏
        title=book.title,
        author=book.author,
        owner_id=current_user.id
    )
    session.add(new_book)  # –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–µ—Å—Å–∏—é
    await session.commit()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ
    await session.refresh(new_book)  # –æ–±–Ω–æ–≤–ª—è–µ–º –∏–∑ –±–∞–∑—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å id
    return new_book  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É


# GET /books ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–Ω–∏–≥
@app.get(
    "/books",
    response_model=list[BookRead],
    tags=["Books"],
    summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥",
    description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–Ω–∏–≥, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
)
async def list_books(
    session: AsyncSession = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    result = await session.execute(
        select(Book).where(Book.owner_id == current_user.id)
    )  # –¥–µ–ª–∞–µ–º SELECT * FROM books
    return result.scalars().all()  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥


@app.get(
    "/me",
    response_model=UserRead,
    tags=["Auth"],
    summary="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ",
    description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."
)
async def read_current_user(current_user: User = Depends(get_current_user)):
    return current_user


@app.delete(
    "/books/{book_id}",
    response_model=dict,
    tags=["Books"],
    summary="–£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É",
    description="–£–¥–∞–ª—è–µ—Ç –∫–Ω–∏–≥—É –ø–æ ID, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
)
async def delete_book(
    book_id: int = Path(..., gt=0),
    session: AsyncSession = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    # –ò—â–µ–º –∫–Ω–∏–≥—É –ø–æ ID –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
    result = await session.execute(
        select(Book).where(Book.id == book_id, Book.owner_id == current_user.id)
    )
    book = result.scalar_one_or_none()

    if not book:
        raise HTTPException(status_code=404, detail="–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º")

    await session.delete(book)
    await session.commit()
    return {"detail": "–ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞"}


@app.put(
    "/books/{book_id}",
    response_model=BookRead,
    tags=["Books"],
    summary="–û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–∏–≥—É",
    description="–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏ –ø–æ ID, –µ—Å–ª–∏ –∫–Ω–∏–≥–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
)
async def update_book(
    book_id: int = Path(..., gt=0),
    data: BookCreate = Depends(),
    session: AsyncSession = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    # –ò—â–µ–º –∫–Ω–∏–≥—É –ø–æ ID –∏ –≤–ª–∞–¥–µ–ª—å—Ü—É
    result = await session.execute(
        select(Book).where(Book.id == book_id, Book.owner_id == current_user.id)
    )
    book = result.scalar_one_or_none()

    if not book:
        raise HTTPException(status_code=404, detail="–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º")

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
    book.title = data.title
    book.author = data.author

    await session.commit()
    await session.refresh(book)
    return book
