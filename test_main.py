import os
import uuid
import pytest
import asyncio
from httpx import AsyncClient
from main import app, init_db  # üëà –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º init_db


# –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤
if os.path.exists("books.db"):
    os.remove("books.db")


@pytest.mark.asyncio
async def test_register_and_login():
    username = f"user_{uuid.uuid4().hex[:6]}"
    password = "secret"

    # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã
    await init_db()

    async with AsyncClient(app=app, base_url="http://test") as client:
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        response = await client.post("/register", json={
            "username": username,
            "password": password
        })
        print("REGISTER:", response.status_code, response.text)
        assert response.status_code == 200
        assert response.json()["username"] == username

        # –õ–æ–≥–∏–Ω
        response = await client.post("/login", data={
            "username": username,
            "password": password
        })
        print("LOGIN:", response.status_code, response.text)
        assert response.status_code == 200
        token = response.json()["access_token"]
        assert token

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ /me
        headers = {"Authorization": f"Bearer {token}"}
        response = await client.get("/me", headers=headers)
        assert response.status_code == 200
        assert response.json()["username"] == username


@pytest.mark.asyncio
async def test_book_crud():
    await init_db()  # üëà —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã

    async with AsyncClient(app=app, base_url="http://test") as client:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å A
        await client.post("/register", json={"username": "userA", "password": "123"})
        await asyncio.sleep(0.1)  # üëà –¥–∞—ë–º –ë–î –∑–∞–≤–µ—Ä—à–∏—Ç—å commit
        login_a = await client.post("/login", data={"username": "userA", "password": "123"})

        print("LOGIN_A STATUS:", login_a.status_code)
        print("LOGIN_A BODY:", login_a.text)

        assert login_a.status_code == 200, login_a.text  # üëà —ç—Ç–æ –≤–∞–∂–Ω–æ

        token_a = login_a.json()["access_token"]
        headers_a = {"Authorization": f"Bearer {token_a}"}

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
        response = await client.post("/books", json={
            "title": "–ú–æ—è –∫–Ω–∏–≥–∞",
            "author": "–ê–≤—Ç–æ—Ä A"
        }, headers=headers_a)
        assert response.status_code == 200
        book_id = response.json()["id"]

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–∏–≥ A
        response = await client.get("/books", headers=headers_a)
        assert response.status_code == 200
        books = response.json()
        assert len(books) == 1
        assert books[0]["title"] == "–ú–æ—è –∫–Ω–∏–≥–∞"

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å B
        await client.post("/register", json={"username": "userB", "password": "123"})
        await asyncio.sleep(0.1)  # üëà –¥–∞—ë–º –ë–î –∑–∞–≤–µ—Ä—à–∏—Ç—å commit
        login_b = await client.post("/login", data={"username": "userB", "password": "123"})
        token_b = login_b.json()["access_token"]
        headers_b = {"Authorization": f"Bearer {token_b}"}

        # B –Ω–µ –≤–∏–¥–∏—Ç –∫–Ω–∏–≥–∏ A
        response = await client.get("/books", headers=headers_b)
        assert response.status_code == 200
        assert response.json() == []

        # B –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É A
        response = await client.delete(f"/books/{book_id}", headers=headers_b)
        assert response.status_code == 404

        # A –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–≤–æ—é –∫–Ω–∏–≥—É
        response = await client.put(f"/books/{book_id}", json={
            "title": "–û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –∫–Ω–∏–≥–∞",
            "author": "–ê–≤—Ç–æ—Ä A"
        }, headers=headers_a)
        assert response.status_code == 200
        assert response.json()["title"] == "–û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –∫–Ω–∏–≥–∞"

        # A —É–¥–∞–ª—è–µ—Ç —Å–≤–æ—é –∫–Ω–∏–≥—É
        response = await client.delete(f"/books/{book_id}", headers=headers_a)
        assert response.status_code == 200
        assert response.json()["detail"] == "–ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞"
